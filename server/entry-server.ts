import { basename } from 'node:path';
import { renderToString, SSRContext } from 'vue/server-renderer';
import devalue from '@nuxt/devalue';
import { createApp } from '../src/main';

function generateHeads(app: SSRContext) {
    try {
        const { $headParams } = app.config.globalProperties;
        let head = '';
        if ($headParams) {
            const obj2head = (a: string, b: any) =>
                `<${a} ${Object.keys(b)
                    .map(c => `${c}="${b[c]}"`)
                    .join(' ')} />`;
            Object.keys($headParams).forEach(a => {
                const type = Object.prototype.toString.call($headParams[a]);
                if (a === 'title') head += `<title>${$headParams[a]}</title>`;
                if (type === '[object Array]') $headParams[a].forEach((b: object) => (head += obj2head(a, b)));
            });
        }
        return head;
    } catch (error) {
        console.error(error);
        return '';
    }
}

export async function render(url: string, manifest: any) {
    const { app, pinia, router } = createApp();

    // set the router to the desired URL before rendering
    await router.push(url);
    await router.isReady();

    // passing SSR context object which will be available via useSSRContext()
    // @vitejs/plugin-vue injects code into a component's setup() that registers
    // itself on ctx.modules. After the render, ctx.modules would contain all the
    // components that have been instantiated during this render call.
    const ctx: any = {};
    const html = await renderToString(app, ctx);
    
    // the SSR manifest generated by Vite contains module -> chunk/asset mapping
    // which we can then use to determine what files need to be preloaded for this
    // request.
    const state = devalue(pinia.state.value);
    const preloadLinks = generateHeads(app) + `<script>window.__INITIAL_STATE__ = ${state};</script>` + renderPreloadLinks(ctx.modules, manifest);
    return [html, preloadLinks];
}

function renderPreloadLinks(modules: any, manifest: any = {}) {
    let links = '';
    const seen = new Set();
    modules.forEach((id: string) => {
        const files = manifest[id];
        if (files) {
            files.forEach((file: any) => {
                if (!seen.has(file)) {
                    seen.add(file);
                    const filename = basename(file);
                    if (manifest[filename]) {
                        for (const depFile of manifest[filename]) {
                            links += renderPreloadLink(depFile);
                            seen.add(depFile);
                        }
                    }
                    links += renderPreloadLink(file);
                }
            });
        }
    });
    return links;
}

function renderPreloadLink(file: any) {
    if (file.endsWith('.js')) {
        return `<link rel="modulepreload" crossorigin href="${file}">`;
    } else if (file.endsWith('.css')) {
        return `<link rel="stylesheet" href="${file}">`;
    } else if (file.endsWith('.woff')) {
        return `<link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
    } else if (file.endsWith('.woff2')) {
        return `<link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
    } else if (file.endsWith('.gif')) {
        return `<link rel="preload" href="${file}" as="image" type="image/gif">`;
    } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
        return `<link rel="preload" href="${file}" as="image" type="image/jpeg">`;
    } else if (file.endsWith('.png')) {
        return `<link rel="preload" href="${file}" as="image" type="image/png">`;
    } else {
        // TODO
        return '';
    }
}
